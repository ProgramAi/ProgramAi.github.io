<?xml version="1.0" encoding="utf-8" standalone="yes" ?> <rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Frontend on ProgramAi! - Dicas, cursos e tutoriais de programação.</title><link>https://programai.github.io/categories/frontend/index.xml<description>Recent content in Frontend on ProgramAi! - Dicas, cursos e tutoriais de programação.</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://programai.github.io/categories/frontend/index.xml" rel="self" type="application/rss+xml"><item><title>Grunt: Automatizando tarefas de build</title><link>https://programai.github.io/web/frontend/grunt<pubdate>Sun, 11 Oct 2015 16:00:00 +0000</pubdate><guid>https://programai.github.io/web/frontend/grunt</guid><description>&lt;p&gt;Você já parou para pensar em quantas tarefas repetidas você executa na hora de fazer &lt;em&gt;build/deploy&lt;/em&gt; do seu projeto de Frontend?&lt;/p&gt; &lt;p&gt;Vamos pensar em algumas mais comuns:&lt;/p&gt; &lt;ul style=&#34;position: relative; left: 30px&#34;&gt; &lt;li&gt;concatenar arquivos css/js;&lt;/li&gt; &lt;li&gt;minificar css/js;&lt;/li&gt; &lt;li&gt;processar arquivos sass/less;&lt;/li&gt; &lt;li&gt;minificar imagens;&lt;/li&gt; &lt;li&gt;minificar html;&lt;/li&gt; &lt;li&gt;fazer upload dos arquivos para o servidor;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Agora tente pensar em quanto tempo você gasta diariamente na realização dessas tarefas. Por alto, podemos dizer que perde-se tempo suficiente para até 5 xícaras de café na copa :D&lt;/p&gt; &lt;p&gt;Mas então você deve se perguntar, como agilizar esse processo e ganhar essas preciosas 5 doses diárias de café a mais? Eu te respondo, com o &lt;a href=&#34;http://gruntjs.com/&#34; target=&#34;_blank&#34;&gt;Grunt&lt;/a&gt;!.&lt;/p&gt; &lt;h2 id=&#34;o-que-é-grunt&#34;&gt;O que é Grunt?&lt;/h2&gt; &lt;p&gt;&lt;img src=&#34;https://programai.github.io/img/posts/web/frontend/grunt/duvida.jpg&#34; alt=&#34;O que é Grunt?&#34; title=&#34;O que é Grunt?&#34; class=&#34;section-image&#34;&gt;&lt;/p&gt; &lt;p&gt;O Grunt é uma ferramenta de linha de comando criada pelo &lt;a href=&#34;https://twitter.com/cowboy&#34; target=&#34;_blank&#34;&gt;Ben Alman&lt;/a&gt;, e é basicamente um executor tarefas. Sabe todas as tarefas repetitivas listadas agora a pouco, além de todas as outras que você realiza mas não foram listadas? Você pode deixar que o Grunt execute elas para você.&lt;/p&gt; &lt;h3 id=&#34;por-que-usar-um-executor-de-tarefas&#34;&gt;Por que usar um executor de tarefas?&lt;/h3&gt; &lt;p&gt;Em uma palavra: automação. Quanto menos trabalho você tem executando tarefas repetitivas como minificação, compilação, teste de unidade, validação, etc, mais fácil se torna o seu trabalho.&lt;/p&gt; &lt;p&gt;Depois de configurado, um executor de tarefas pode realizar boa parte do trabalho para você com basicamente nenhum esforço.&lt;/p&gt; &lt;h3 id=&#34;por-que-usar-o-grunt&#34;&gt;Por que usar o Grunt?&lt;/h3&gt; &lt;p&gt;O ecossistema do Grunt é enorme e continua crescendo diariamente. Com literalmente centenas de plugins disponíveis, você pode usar o Grunt para automatizar praticamente qualquer coisa com o mínimo de esforço.&lt;/p&gt; &lt;p&gt;Se ninguém tiver desenvolvido o que você precisa, criar e publicar o seu próprio plugin do Grunt é extremamente fácil. Aqui você encontra mais detalhes de &lt;a href=&#34;http://gruntjs.com/creating-plugins&#34; target=&#34;_blank&#34;&gt;como criar o seu plugin para o Grunt&lt;/a&gt;.&lt;/p&gt; &lt;h3 id=&#34;quem-usa-grunt&#34;&gt;Quem usa Grunt?&lt;/h3&gt; &lt;p&gt;Atualmente o Grunt é utilizado em uma grande quantidade de projetos Web pelo mundo afora. Projetos como jQuery e Bootstrap utilizam o Grunt para automatizar o build. A imagem abaixo demonstra algumas empresas/projetos que utilizam o Grunt.&lt;/p&gt; &lt;figure class=&#34;post-figure medium&#34;&gt; &lt;img src=&#34;https://programai.github.io/img/posts/web/frontend/grunt/quem-usa-grunt.png&#34; class=&#34;responsive-image&#34; alt=&#34;Empresas/Projetos que utilizam Grunt.&#34;&gt; &lt;figcaption class=&#34;caption&#34;&gt;Empresas/Projetos que utilizam Grunt.&lt;/figcaption&gt; &lt;/figure&gt; &lt;p&gt;Enfim, atualmente considero o Grunt como uma ferramenta indispensável para qualquer projeto de Frontend Web. Se você ainda não está usando, está perdendo tempo (literalmente)!&lt;/p&gt; &lt;p&gt;Mais detalhes sobre a ferramenta podem ser encontrados na &lt;a href=&#34;http://gruntjs.com/&#34; target=&#34;_blank&#34;&gt;página oficial do Grunt&lt;/a&gt;.&lt;/p&gt; &lt;h2 id=&#34;grunt-primeiros-passos&#34;&gt;Grunt: Primeiros Passos&lt;/h2&gt; &lt;p&gt;&lt;img src=&#34;https://programai.github.io/img/posts/web/frontend/grunt/primeiros-passos.jpg&#34; alt=&#34;Grunt: Primeiros Passos&#34; title=&#34;Grunt: Primeiros Passos&#34; class=&#34;section-image&#34;&gt;&lt;/p&gt; &lt;p&gt;Então, vou usar o Grunt, do que eu preciso?&lt;/p&gt; &lt;p&gt;O primeiro passo é entender como o Grunt funciona. O Grunt é implementado em Javascript e roda no &lt;a href=&#34;https://nodejs.org/en/&#34; target=&#34;_blank&#34;&gt;Node.js&lt;/a&gt;, então antes de instalar o Grunt você vai precisar ter o &lt;em&gt;node&lt;/em&gt; e o &lt;em&gt;npm&lt;/em&gt; instalados. Caso você não tenha seguem alguns links de &lt;a href=&#34;http://blog.teamtreehouse.com/install-node-js-npm-windows&#34; target=&#34;_blank&#34;&gt;como instalar o node e npm no Windows&lt;/a&gt; e &lt;a href=&#34;https://www.digitalocean.com/community/tutorials/como-instalar-o-node-js-em-um-servidor-ubuntu-14-04-pt&#34; target=&#34;_blank&#34;&gt;como instalar o node e npm no Ubuntu&lt;/a&gt;.&lt;/p&gt; &lt;h3 id=&#34;instalação-do-grunt&#34;&gt;Instalação do Grunt&lt;/h3&gt; &lt;p&gt;Tendo instalado o node e o npm na sua máquina, o único trabalho para instalar o Grunt é rodar o seguinte comando:&lt;/p&gt; &lt;pre&gt; npm install -g grunt-cli &lt;/pre&gt; &lt;p&gt;Isto vai habilitar o comando &lt;code&gt;grunt&lt;/code&gt; no terminal.&lt;/p&gt; &lt;p&gt;Como você já deve ter notado, instalamos o &lt;em&gt;grunt-cli&lt;/em&gt; e não o &lt;em&gt;grunt&lt;/em&gt;, a função do &lt;em&gt;grunt-cli&lt;/em&gt; é executar o &lt;em&gt;grunt&lt;/em&gt; configurado para o projeto. Dessa forma é possível ter vários projetos, cada um rodando uma versão diferente do &lt;em&gt;grunt&lt;/em&gt; sem problemas.&lt;/p&gt; &lt;h3 id=&#34;configurando-o-projeto-para-utilizar-o-grunt&#34;&gt;Configurando o projeto para utilizar o Grunt&lt;/h3&gt; &lt;p&gt;Para um projeto utilizar o Grunt, são necessários pelo menos dois arquivos, o &lt;code&gt;package.json&lt;/code&gt; e o &lt;code&gt;Gruntfile.js&lt;/code&gt;.&lt;/p&gt; &lt;h3 id=&#34;package-json&#34;&gt;package.json&lt;/h3&gt; &lt;p&gt;O arquivo &lt;code&gt;package.json&lt;/code&gt; é utilizado pelo &lt;code&gt;npm&lt;/code&gt; para armazenar os meta-dados do seu projeto. Informações como nome do projeto, autor, url, licença, repositório e dependências, são todas armazenadas neste arquivo.&lt;/p&gt; &lt;p&gt;Então é por isso que o Grunt precisa dele, ao instalar um plugin do grunt no projeto, esse plugin é registrado como dependência no arquivo package.json.&lt;/p&gt; &lt;p&gt;O arquivo &lt;em&gt;package.json&lt;/em&gt; deve estar no diretório raiz da sua aplicação. Você pode criar um através do comando &lt;code&gt;npm init&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Ao rodar o comando &lt;em&gt;npm init&lt;/em&gt; ele vai solicitar os dados do seu projeto, nem todos são obrigatórios. Executei o comando aqui, preenchi algumas informações e gerei o seguinte arquivo &lt;em&gt;package.json&lt;/em&gt;:&lt;/p&gt; &lt;pre data-enlighter-language=&#34;json&#34;&gt; { &#34;name&#34;: &#34;projeto&#34;, &#34;version&#34;: &#34;1.0.0&#34;, &#34;description&#34;: &#34;Meu Projeto&#34;, &#34;main&#34;: &#34;package.json&#34;, &#34;scripts&#34;: { &#34;test&#34;: &#34;echo \&#34;Error: no test specified\&#34; &amp;&amp; exit 1&#34; }, &#34;author&#34;: &#34;Andrew Cavalcante Pacifico&#34;, &#34;license&#34;: &#34;Apache&#34; } &lt;/pre&gt; &lt;p&gt;Para instalar o Grunt e os plugins dele no seu projeto, utilize sempre o comando &lt;code&gt;npm install &amp;lt;dependência&amp;gt; --save-dev&lt;/code&gt;, dessa forma a dependência é automaticamente adicionada à sessão &lt;em&gt;devDependencies&lt;/em&gt; do arquivo &lt;em&gt;package.json&lt;/em&gt;.&lt;/p&gt; &lt;p&gt;A importância de adicionar a dependência à sessão &lt;em&gt;devDependencies&lt;/em&gt; do &lt;em&gt;package.json&lt;/em&gt;, é que caso você precise configurar o projeto novamente em uma outra máquina, basta rodar o comando &lt;code&gt;npm install&lt;/code&gt;, e todas as dependências do projeto (incluindo o Grunt e seus plugins) serão automaticamente instaladas.&lt;/p&gt; &lt;p&gt;Então vamos instalar o Grunt localmente em nosso projeto. Para isso basta executar o seguinte comando:&lt;/p&gt; &lt;pre&gt; npm install grunt --save-dev &lt;/pre&gt; &lt;p&gt;Um diretório chamado &lt;em&gt;node-modules&lt;/em&gt; deve ter sido adicionado ao seu projeto, este diretório conterá todas as dependências do seu projeto instaladas via &lt;em&gt;npm&lt;/em&gt;.&lt;/p&gt; &lt;p&gt;Este diretório deve conter um outro diretório chamado &lt;em&gt;grunt&lt;/em&gt;, o que indica que o Grunt foi instalado localmente no seu projeto.&lt;/p&gt; &lt;p&gt;Se você der uma olhada no arquivo &lt;em&gt;package.json&lt;/em&gt; verá que ele conterá agora a seguinte sessão:&lt;/p&gt; &lt;pre data-enlighter-language=&#34;json&#34;&gt; &#34;devDependencies&#34;: { &#34;grunt&#34;: &#34;~0.4.5&#34; } &lt;/pre&gt; &lt;p&gt;Isso significa que o grunt foi adicionado como dependência do projeto.&lt;/p&gt; &lt;p&gt;Caso você esteja utilizando algum software de controle de versão para o seu projeto, é importante ressaltar que apenas o arquivo &lt;em&gt;package.json&lt;/em&gt; precisa ser versionado, o diretório &lt;em&gt;node_modules&lt;/em&gt; deve ser deixado de fora, uma vez que ele é gerado automaticamente.&lt;/p&gt; &lt;h3 id=&#34;gruntfile-js&#34;&gt;Gruntfile.js&lt;/h3&gt; &lt;p&gt;O &lt;em&gt;Gruntfile.js&lt;/em&gt; é o arquivo onde você vai definir e as tarefas e configurar os plugins do Grunt. Ele é um arquivo &lt;em&gt;Javascript&lt;/em&gt; que deve ser colocado na raiz do seu projeto junto com o &lt;em&gt;package.json&lt;/em&gt;, e assim como ele, também deve ser versionado.&lt;/p&gt; &lt;p&gt;O &lt;em&gt;Gruntfile&lt;/em&gt; é formado basicamente pela configuração do projeto/plugins, pelo carregamento dos plugins do Grunt, definição das tarefas, e uma função que engloba tudo isso. Abaixo temos um exemplo de um &lt;em&gt;Gruntfile&lt;/em&gt; básico.&lt;/p&gt; &lt;pre data-enlighter-language=&#34;js&#34;&gt; module.exports = function(grunt) { // configuração dos plugins grunt.initConfig({ }); // carregamento dos plugins grunt.loadNpmTasks(&#39;nome-do-plugin&#39;); // definição das tarefas grunt.registerTask(&#39;default&#39;, []); }; &lt;/pre&gt; &lt;p&gt;No código acima é possível perceber as três seções principais mencionadas.&lt;/p&gt; &lt;p&gt;Toda a configuração dos plugins e tarefas do Grunt deve ser feita através de um objeto passado como parâmetro para a função &lt;code data-enlighter-language=&#34;js&#34;&gt;grunt.initConfig()&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Todos os plugins instalados devem ser carregados através da chamada da função &lt;code data-enlighter-language=&#34;js&#34;&gt;grunt.loadNpmTasks()&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;E por fim, você pode definir as suas tarefas através da função &lt;code data-enlighter-language=&#34;js&#34;&gt;grunt.registerTask()&lt;/code&gt;. Cada plugin instalado automaticamente cria uma tarefa com o seu nome, mas se o objetivo é automatizar, não faz sentido termos que chamar todas as tarefas uma por uma, então você pode definir uma tarefa &lt;em&gt;default&lt;/em&gt; que é executada sempre que o comando &lt;code&gt;grunt&lt;/code&gt; for executado, e pode configurar esta tarefa para executar todas as outras.&lt;/p&gt; &lt;h2 id=&#34;plugins-do-grunt&#34;&gt;Plugins do Grunt&lt;/h2&gt; &lt;p&gt;&lt;img src=&#34;https://programai.github.io/img/posts/web/frontend/grunt/grunt-plugins.png&#34; alt=&#34;Plugins do Grunt&#34; title=&#34;Plugins do Grunt&#34; class=&#34;section-image&#34;&gt;&lt;/p&gt; &lt;p&gt;Agora que você já sabe como instalar e configurar o &lt;em&gt;Grunt&lt;/em&gt;, só o que falta é começar instalar os plugins. Como eu mencionei no início do artigo, o &lt;em&gt;Grunt&lt;/em&gt; já tem plugin pra praticamente tudo, então vamos configurar alguns dos mais comuns para o nosso projeto.&lt;/p&gt; &lt;h3 id=&#34;concat&#34;&gt;Concat&lt;/h3&gt; &lt;p&gt;Geralmente quando trabalhamos em um projeto mais complexo, o ideal é modularizar o nosso código Javascript, e dividir em diferentes arquivos para facilitar a manutenção. Porém para melhorar a performance do projeto, quanto menos arquivos carregados melhor. Então como proceder?&lt;/p&gt; &lt;p&gt;Neste caso podemos utilizar o plugin &lt;a href=&#34;https://github.com/gruntjs/grunt-contrib-concat&#34; target=&#34;_blank&#34;&gt;grunt-contrib-concat&lt;/a&gt;, que como o próprio nome já diz, é utilizado para concatenar arquivos. Dessa forma é possível possuir diversos arquivos com Javascript, e configurar o &lt;em&gt;Grunt&lt;/em&gt; para juntar todos esses arquivos em um só.&lt;/p&gt; &lt;p&gt;Para instalar o plugin, basta executar o comando abaixo:&lt;/p&gt; &lt;pre&gt; npm install grunt-contrib-concat --save-dev &lt;/pre&gt; &lt;p&gt;Depois disso, vamos criar o nosso &lt;em&gt;Gruntfile.js&lt;/em&gt;, com o seguinte conteúdo:&lt;/p&gt; &lt;pre data-enlighter-language=&#34;js&#34;&gt; module.exports = function(grunt) { // configuração dos plugins grunt.initConfig({ concat: { dist: { src: [ &#39;js/src/functions.js&#39;, &#39;js/src/core.js&#39; ], dest: &#39;js/dist/projeto.js&#39;, } } }); // carregamento dos plugins grunt.loadNpmTasks(&#39;grunt-contrib-concat&#39;); // definição das tarefas grunt.registerTask(&#39;default&#39;, [&#39;concat&#39;]); }; &lt;/pre&gt; &lt;p&gt;No código acima carregamos o plugin &lt;code&gt;grunt-contrib-concat&lt;/code&gt;, definimos que a tarefa &lt;em&gt;default&lt;/em&gt; deverá executar a tarefa referente ao plugin, e definimos as configurações do plugin.&lt;/p&gt; &lt;p&gt;Nas configurações do plugin o que fizemos foi definir como source os arquivos &lt;em&gt;functions.js&lt;/em&gt; e &lt;em&gt;core.js&lt;/em&gt; ambos localizados no diretório &lt;em&gt;js/src&lt;/em&gt;, e definimos como destino um único arquivo chamado &lt;em&gt;projeto.js&lt;/em&gt; que deverá ser gerado no diretório &lt;em&gt;js/dist&lt;/em&gt; (que é criado caso não exista).&lt;/p&gt; &lt;p&gt;Portanto, ao executar o comando &lt;code&gt;grunt&lt;/code&gt; os arquivos &lt;em&gt;functions.js&lt;/em&gt; e &lt;em&gt;core.js&lt;/em&gt; serão automaticamente concatenados em um novo arquivo chamado &lt;em&gt;projeto.js&lt;/em&gt;.&lt;/p&gt; &lt;p&gt;Mágica não é? :D&lt;/p&gt; &lt;p&gt;O plugin &lt;em&gt;concat&lt;/em&gt; possui uma série de outras configurações possíveis, mais informações é só consultar a &lt;a href=&#34;https://github.com/gruntjs/grunt-contrib-concat&#34; target=&#34;_blank&#34;&gt;documentação do plugin&lt;/a&gt;.&lt;/p&gt; &lt;h3 id=&#34;uglify&#34;&gt;Uglify&lt;/h3&gt; &lt;p&gt;Uma das práticas mais conhecidas de quem trabalha com frontend é a de minificar arquivos Javascript e CSS, dessa forma é possível diminuir o tempo de carregamento da página melhorando a performance e a experiência do usuário.&lt;/p&gt; &lt;p&gt;Durante algum tempo, o que eu fazia em meus projetos era procurar algum site de minificação como o &lt;a href=&#34;http://jscompress.com/&#34;&gt;http://jscompress.com/&lt;/a&gt;, copiar e colar o meu código lá, pegar o código minificado e salvar em um arquivo .min.js. E quando eu alterava alguma coisa no arquivo? Exato, tinha que fazer tudo isso de novo.&lt;/p&gt; &lt;p&gt;O &lt;a href=&#34;https://github.com/gruntjs/grunt-contrib-uglify&#34; target=&#34;_blank&#34;&gt;grunt-contrib-uglify&lt;/a&gt; é um plugin para o Grunt que faz exatamente isso pra você. Nele você pode especificar uma lista de arquivos &lt;em&gt;js&lt;/em&gt; de entrada e um arquivo &lt;em&gt;js&lt;/em&gt; de saída que terá o conteúdo dos arquivos de entrada, e já minificados.&lt;/p&gt; &lt;p&gt;Sabendo disso, então qual a necessidade do &lt;em&gt;concat&lt;/em&gt;? Bem, geralmente em ambiente de desenvolvimento nós não queremos os arquivos minificados, então o ideal é configurar o grunt para executar o &lt;em&gt;concat&lt;/em&gt; em desenvolvimento, e o &lt;em&gt;uglify&lt;/em&gt; em uma task de &lt;em&gt;build/deploy&lt;/em&gt;.&lt;/p&gt; &lt;p&gt;Então vamos lá, para instalar o plugin basta rodar o comando abaixo:&lt;/p&gt; &lt;pre&gt;npm install grunt-contrib-uglify --save-dev&lt;/pre&gt; &lt;p&gt;Após a instalação vamos adicionar a seguinte configuração ao nosso &lt;em&gt;Gruntfile&lt;/em&gt; no objeto passado para a função &lt;code&gt;grunt.initConfig&lt;/code&gt;:&lt;/p&gt; &lt;pre data-enlighter-language=&#34;js&#34;&gt; uglify: { dist: { files: { &#39;js/dist/projeto.js&#39;: [ &#39;js/src/functions.js&#39;, &#39;js/src/core.js&#39; ] } } } &lt;/pre&gt; &lt;p&gt;Então adicionamos a linha para carregar o plugin:&lt;/p&gt; &lt;pre data-enlighter-language=&#34;js&#34;&gt;grunt.loadNpmTasks(&#39;grunt-contrib-uglify&#39;);&lt;/pre&gt; &lt;p&gt;E vamos definir uma nova task chamada &lt;em&gt;deploy&lt;/em&gt;, que irá executar o &lt;em&gt;uglify&lt;/em&gt;.&lt;/p&gt; &lt;pre data-enlighter-language=&#34;js&#34;&gt;grunt.registerTask(&#39;deploy&#39;, [&#39;uglify&#39;]);&lt;/pre&gt; &lt;p&gt;Dessa maneira, ao executar o comando &lt;code&gt;grunt&lt;/code&gt; no terminal, os seus arquivos &lt;em&gt;Javascript&lt;/em&gt; serão concatenados em um único arquivo chamado &lt;em&gt;projeto.js&lt;/em&gt;, e ao executar o comando &lt;code&gt;grunt deploy&lt;/code&gt; eles serão concatenados e minificados.&lt;/p&gt; &lt;h3 id=&#34;cssmin&#34;&gt;CSSMin&lt;/h3&gt; &lt;p&gt;Beleza, falei que é essencial minificar Javascript e CSS, e mostrei o Uglify que minifica o Javascript. Mas e o CSS?&lt;/p&gt; &lt;p&gt;Pra minificar o CSS tem esse cara aí, &lt;a href=&#34;https://github.com/gruntjs/grunt-contrib-cssmin&#34; target=&#34;_blank&#34;&gt;CSSMin&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;A instalação do plugin segue o padrão dos plugins anteriores:&lt;/p&gt; &lt;pre&gt;npm install grunt-contrib-cssmin --save-dev&lt;/pre&gt; &lt;p&gt;A configuração do plugin no &lt;em&gt;Gruntfile&lt;/em&gt; vai ficar assim:&lt;/p&gt; &lt;pre data-enlighter-language=&#34;js&#34;&gt; cssmin: { dist: { files: { &#39;css/dist/projeto.css&#39;: [ &#39;css/src/components.css&#39;, &#39;css/src/core.css&#39; ] } } } &lt;/pre&gt; &lt;p&gt;Então adicionamos o carregamento do plugin no &lt;em&gt;Gruntfile&lt;/em&gt;:&lt;/p&gt; &lt;pre data-enlighter-language=&#34;js&#34;&gt; grunt.loadNpmTasks(&#39;grunt-contrib-cssmin&#39;); &lt;/pre&gt; &lt;p&gt;E alteramos a definição da task de &lt;em&gt;deploy&lt;/em&gt; para executar além do &lt;em&gt;uglify&lt;/em&gt;, o &lt;em&gt;cssmin&lt;/em&gt;:&lt;/p&gt; &lt;pre data-enlighter-language=&#34;js&#34;&gt; grunt.registerTask(&#39;deploy&#39;, [&#39;uglify&#39;, &#39;cssmin&#39;]); &lt;/pre&gt; &lt;p&gt;Nessa configuração do exemplo, assumimos que o nosso projeto possui dois arquivos css, um contendo as definições dos componentes utilizados na página, e outro com as configurações mais genéricas. No build nós vamos juntar esses arquivos e minifica-los em um único arquivo chamado &lt;em&gt;projeto.css&lt;/em&gt;.&lt;/p&gt; &lt;p&gt;A mesma estratégia do Javascript pode ser utilizada também aqui, usar o &lt;em&gt;concat&lt;/em&gt; em ambiente de desenvolvimento, e o &lt;em&gt;cssmin&lt;/em&gt; para deploy.&lt;/p&gt; &lt;h3 id=&#34;watch&#34;&gt;Watch&lt;/h3&gt; &lt;p&gt;O ser humano é sempre acha um problema em tudo :D , digo isso pois quando eu comecei a usar o &lt;em&gt;Grunt&lt;/em&gt;, mesmo com todas as vantagens, eu reclamei do fato de precisar ir até o terminal e rodar o comando &lt;code&gt;grunt&lt;/code&gt; todas as vezes que fizesse alguma alteração no meu projeto.&lt;/p&gt; &lt;p&gt;Se você estiver achando que vai precisar fazer a mesma coisa, adianto logo que não.&lt;/p&gt; &lt;figure class=&#34;post-figure medium&#34;&gt; &lt;img src=&#34;https://programai.github.io/img/posts/web/frontend/grunt/uhu.jpg&#34; class=&#34;responsive-image&#34; alt=&#34;uhu&#34;&gt; &lt;/figure&gt; &lt;p&gt;O Grunt possui um plugin chamado &lt;a href=&#34;https://github.com/gruntjs/grunt-contrib-watch&#34; target=&#34;_blank&#34;&gt;Watch&lt;/a&gt; responsável por ficar observando os seus arquivos e aguardando que alguma alteração aconteça, e quando acontecer, executar uma determinada tarefa.&lt;/p&gt; &lt;p&gt;Então, o primeiro passo como sempre, instalar o plugin:&lt;/p&gt; &lt;pre&gt;npm install grunt-contrib-watch --save-dev&lt;/pre&gt; &lt;p&gt;E vamos adicionar a configuração do plugin, que vai ser a seguinte:&lt;/p&gt; &lt;pre data-enlighter-language=&#34;js&#34;&gt; watch: { scripts: { files: [ &#39;js/src/functions.js&#39;, &#39;js/src/core.js&#39; ], tasks : [ &#39;concat&#39; ] } } &lt;/pre&gt; &lt;p&gt;Nessa configuração, nós definimos para o &lt;em&gt;Watch&lt;/em&gt; ficar observando alterações nos nossos arquivos Javascript, e caso algum deles seja alterado, automaticamente a task &lt;em&gt;concat&lt;/em&gt; será executada.&lt;/p&gt; &lt;p&gt;Adicionamos o carregamento do plugin:&lt;/p&gt; &lt;pre data-enlighter-language=&#34;js&#34;&gt;grunt.loadNpmTasks(&#39;grunt-contrib-watch&#39;);&lt;/pre&gt; &lt;p&gt;E dessa vez não vamos adicionar a task do plugin a nenhuma das tasks que nós definimos, pois uma vez que o watch gera uma task que fica escutando alterações, ele ocupa o terminal, então deve ser executado sozinho.&lt;/p&gt; &lt;p&gt;Portanto, após a instalação, carregamento e configuração do &lt;em&gt;watch&lt;/em&gt; no nosso &lt;em&gt;Gruntfile&lt;/em&gt;, só o que precisamos fazer é rodar o comando &lt;code&gt;grunt watch&lt;/code&gt;. Ao fazer isso, o terminal deve exibir algo mais ou menos assim:&lt;/p&gt; &lt;figure class=&#34;post-figure&#34; style=&#34;width: 489px&#34;&gt; &lt;img src=&#34;https://programai.github.io/img/posts/web/frontend/grunt/grunt-watch-waiting.png&#34; class=&#34;responsive-image&#34; alt=&#34;Grunt Watch aguardando alterações.&#34; title=&#34;Grunt Watch aguardando alterações.&#34;&gt; &lt;figcaption class=&#34;caption&#34;&gt;Grunt Watch aguardando alterações.&lt;/figcaption&gt; &lt;/figure&gt; &lt;p&gt;Isso indica que o &lt;em&gt;grunt watch&lt;/em&gt; está executando e aguardando alguma alteração nos arquivos configurados para serem observados.&lt;/p&gt; &lt;p&gt;Ao realizar uma alteração em um dos arquivos, o que deve acontecer é mais ou menos isso:&lt;/p&gt; &lt;figure class=&#34;post-figure medium&#34; style=&#34;width: 626px&#34;&gt; &lt;img src=&#34;https://programai.github.io/img/posts/web/frontend/grunt/grunt-watch-executing.png&#34; class=&#34;responsive-image&#34; alt=&#34;Grunt Watch executando uma tarefa.&#34; title=&#34;Grunt Watch executando uma tarefa.&#34;&gt; &lt;figcaption class=&#34;caption&#34;&gt;Grunt Watch executando uma tarefa.&lt;/figcaption&gt; &lt;/figure&gt; &lt;p&gt;Percebam o que aconteceu. O &lt;em&gt;grunt watch&lt;/em&gt; detectou uma alteração no arquivo &lt;em&gt;core.js&lt;/em&gt; então executou a task &lt;em&gt;concat&lt;/em&gt; conforme foi definido na configuração.&lt;/p&gt; &lt;h3 id=&#34;outros-plugins&#34;&gt;Outros Plugins&lt;/h3&gt; &lt;p&gt;Nós demos uma olhada por alto em alguns dos plugins mais básicos, e mais comuns. Deixo claro que todos eles têm ainda uma porção de outras configurações possíveis, portanto vale a pena dar uma olhada na documentação detalhada de cada um e adapta-los para a sua necessidade.&lt;/p&gt; &lt;p&gt;Mas agora que você já conhece o Grunt, o próximo passo é buscar outros plugins que atendam às suas necessidades, como eu falei, tem plugin pra praticamente tudo. Abaixo listo alguns dos plugins que eu utilizo nos meus projetos:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&#34;https://github.com/gruntjs/grunt-contrib-imagemin&#34; target=&#34;_blank&#34;&gt;ImageMin&lt;/a&gt;: Compressão de imagens;&lt;/li&gt; &lt;li&gt;&lt;a href=&#34;https://github.com/gruntjs/grunt-contrib-copy&#34; target=&#34;_blank&#34;&gt;Copy&lt;/a&gt;: Copia arquivos e diretórios;&lt;/li&gt; &lt;li&gt;&lt;a href=&#34;https://github.com/gruntjs/grunt-contrib-copy&#34; target=&#34;_blank&#34;&gt;Exec&lt;/a&gt;: Executa comandos shell;&lt;/li&gt; &lt;li&gt;&lt;a href=&#34;https://github.com/gruntjs/grunt-contrib-htmlmin&#34; target=&#34;_blank&#34;&gt;HTMLMin&lt;/a&gt;: Minificação de HTML;&lt;/li&gt; &lt;li&gt;&lt;a href=&#34;https://github.com/outaTiME/grunt-replace&#34; target=&#34;_blank&#34;&gt;Replace&lt;/a&gt;: Alteração de trechos de um arquivo seguindo um padrão;&lt;/li&gt; &lt;li&gt;&lt;a href=&#34;https://github.com/gruntjs/grunt-contrib-sass&#34; target=&#34;_blank&#34;&gt;Sass&lt;/a&gt;: Compila arquivos do &lt;a href=&#34;http://sass-lang.com/&#34; target=&#34;_blank&#34;&gt;SASS&lt;/a&gt; para Css;&lt;/li&gt; &lt;li&gt;&lt;a href=&#34;https://github.com/jedrichards/grunt-rsync&#34; target=&#34;_blank&#34;&gt;Rsync&lt;/a&gt;: Utiliza o &lt;a href=&#34;http://linux.die.net/man/1/rsync&#34; target=&#34;_blank&#34;&gt;rsync&lt;/a&gt; para sincronizar diretórios. Excelente como alternativa ao FTP para fazer deploy de aplicações.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Enfim, existem centenas de outros plugins disponíveis, a página oficial do Grunt oferece uma lista de plugins disponíveis, é só ir lá e dar uma olhada.&lt;/p&gt; &lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt; &lt;p&gt;&lt;img src=&#34;https://programai.github.io/img/posts/web/frontend/grunt/conclusao.jpg&#34; alt=&#34;Conclusão&#34; title=&#34;Conclusão&#34; class=&#34;section-image&#34;&gt;&lt;/p&gt; &lt;p&gt;Então pessoal, com isso já dá pra ter uma boa noção de como usar o &lt;em&gt;Grunt&lt;/em&gt; nos seus projetos. Lembrando que o &lt;em&gt;Gruntfile&lt;/em&gt; é um arquivo javascript padrão, logo você pode programar lá dentro conforme as suas necessidades, sem problema algum.&lt;/p&gt; &lt;p&gt;Caso alguém queira dar uma olhada no “projeto” exemplo completo, é só conferir aqui: &lt;a href=&#34;https://github.com/ProgramAi/tutorial-grunt&#34;&gt;https://github.com/ProgramAi/tutorial-grunt&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Vale mencionar que o Grunt não é a única ferramenta de automação de build disponível no mercado, uma outra ferramenta que tem muitos adeptos é o &lt;a href=&#34;http://gulpjs.com/&#34; target=&#34;_blank&#34;&gt;Gulp&lt;/a&gt;. Tem diversos artigos na Web comparando os dois. Vale a pena dar uma avaliada também.&lt;/p&gt; &lt;p&gt;Então, por enquanto é isso. Dúvidas, sugestões, opiniões, por favor mandem nos comentários.&lt;/p&gt; &lt;p&gt;Não esqueçam de acompanhar o blog nas redes sociais.&lt;/p&gt; &lt;p&gt;Valeu e até a próxima.&lt;/p&gt; &lt;p&gt;Brax!&lt;/p&gt;</description></item></channel></rss>
